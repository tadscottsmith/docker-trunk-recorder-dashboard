services:
  mongodb:
    image: arm64v8/mongo:4.4.18
    restart: unless-stopped
    command: [
      "--replSet", "rs0",
      "--bind_ip_all",
      "--setParameter", "enableTestCommands=1",
      "--setParameter", "diagnosticDataCollectionEnabled=false",
      "--oplogSize", "128",
      "--wiredTigerCacheSizeGB", "1",
      "--setParameter", "transactionLifetimeLimitSeconds=86400",
      "--setParameter", "maxTransactionLockRequestTimeoutMillis=5000",
      "--setParameter", "enableFlowControl=false"
    ]
    volumes:
      - ./data/mongodb:/data/db
      - ./data/mongodb-config:/data/configdb
    networks:
      - trunk_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "try { rs.status().ok } catch(e) { rs.initiate({ _id: 'rs0', members: [{ _id: 0, host: 'mongodb:27017' }] }).ok }"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "${DASHBOARD_PORT:-3000}:3000"
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - ./data:/app/data
      - ${RADIOS_FILE:-./data/radios.csv}:/app/data/radios.csv:ro
      - ./package.json:/app/package.json
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/?replicaSet=rs0&directConnection=true
      - DB_NAME=trunk_recorder
      - COLLECTION_NAME=radio_events
      - SYSTEM_FILTERS=${SYSTEM_FILTERS:-}
      - NODE_ENV=development
      - UID=${UID:-1000}
      - GID=${GID:-1000}
    user: "${UID:-1000}:${GID:-1000}"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - trunk_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  ingest:
    build:
      context: .
      dockerfile: Dockerfile.ingest
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/?replicaSet=rs0&directConnection=true
      - DB_NAME=trunk_recorder
      - COLLECTION_NAME=radio_events
      - HTTP_MONGO_PORT=3001
      - UID=${UID:-1000}
      - GID=${GID:-1000}
    user: "${UID:-1000}:${GID:-1000}"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - trunk_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  # MongoDB initialization service - only runs during initial setup
  mongo-init:
    image: mongo:latest
    restart: "no"
    profiles: ["init"]
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    command: >
      bash -c '
        echo "Waiting for MongoDB to be ready..." &&
        until mongosh --quiet --host mongodb:27017 --eval "try { rs.status().ok } catch(e) { rs.initiate().ok }" > /dev/null 2>&1; do
          sleep 2;
          echo "Still waiting for MongoDB...";
        done &&
        echo "MongoDB is ready, initializing..." &&
        mongosh --host mongodb:27017 /docker-entrypoint-initdb.d/mongo-init.js &&
        echo "MongoDB initialization completed"
      '
    networks:
      - trunk_network

networks:
  trunk_network:
    driver: bridge
